name: MSBuild

on:
  workflow_dispatch:

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: vstdriver.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

#    - name: Restore NuGet packages
#      working-directory: ${{env.GITHUB_WORKSPACE}}
#      run: nuget restore ${{env.SOLUTION_FILE_PATH}}
      
#    - name: Install NSIS
#      run: |
#        Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
#        scoop bucket add extras
#        scoop install nsis
      
    - name: Get current date
      id: date
      run: echo "::set-output name=today::$(date +'%Y%m%d')" 
      
    - name: Test date
      run: echo ${{ steps.date.outputs.today }}
      
    - name: Set version number
      run: |
        $version = ${{ steps.date.outputs.today }}+"."+(1000+$($Env:GITHUB_RUN_NUMBER))+".0"
        echo $version
        echo "VERSION_NUMBER=$version" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
        
    - name: Test version number
      run: echo ${{ env.VERSION_NUMBER }}
      
    - name: Print NSIS version
      run: makensis -VERSION
    - name: Print NSIS compile flags
      run: makensis -HDRINFO
      
    - name: Download LockedList
      run: |
        mkdir ${env:GITHUB_WORKSPACE}\LockedList
        curl -O https://nsis.sourceforge.io/mediawiki/images/d/d3/LockedList.zip
    
    - name: Extract LockedList dll files
      run: Expand-Archive -LiteralPath LockedList.zip -DestinationPath ${env:ProgramFiles(x86)}\nsis
        
    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
      
    - name: Release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        tag_name: ${{ env.VERSION_NUMBER }}
        release_name: Release ${{ env.VERSION_NUMBER }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
      
    - name: Upload Artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./vstmididrv.exe
        asset_name: vstdriver.exe
        asset_content_type: application/octet-stream
